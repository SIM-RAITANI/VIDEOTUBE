import { asyncHandler } from "../utils/asyncHandler.js";
import { userModel } from "../models/user.model.js";
import { ApiError } from "../utils/ApiError.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { uploadFile , deleteFile} from "../utils/cloudinary.js";

const generateAccessTokenAndRefreshToken = async (userId) => {
  try {
    const user = await userModel.findById(userId);
    const accessToken = await user.generateAccessToken();
    const refreshToken = await user.generateRefreshToken();

    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false });

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(500, "Something went wrong");
  }
};

const registerUser = asyncHandler(async (req, res) => {
  //get user details from frontend
  //validation of the user
  //if user already exists
  //check for images
  //if yes upload them on cloudinary
  //extract the url generated by cloudinary
  //create user-object to store in db
  //remove password and refresh token field from response
  //check for user creation
  //return res
  const { fullName, email, username, password } = req.body;

  if (!fullName || !email || !username || !password) {
    throw new ApiError(400, "All fields are required");
  }

  const existedUser = await userModel.findOne({
    $or: [{ username }, { email }],
  });

  if (existedUser) {
    throw new ApiError(409, "User already exists");
  }
  console.log("all fine", req.files);

  const avatarPath = await req.files?.avatar[0]?.path;
  console.log("avatar path", avatarPath);
  let coverImagePath;
  if (
    req.files &&
    Array.isArray(req.files.coverImage) &&
    req.files.coverImage.length > 0 &&
    req.files.coverImage[0]
  ) {
    coverImagePath = req.files?.coverImage[0]?.path;
  }

  if (!avatarPath) {
    throw new ApiError(400, "Avatar is missing");
  }

  const avatar = await uploadFile(avatarPath);
  const coverImage = await uploadFile(coverImagePath);

  if (!avatar) {
    throw new ApiError(400, "Something went wrong!!");
  }

  const user = await userModel.create({
    fullName,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    email,
    password,
    username: username.toLowerCase(),
  });

  const createdUser = await userModel
    .findById(user._id)
    .select("-password -refreshToken");
  if (!createdUser) {
    throw new ApiError(500, "Something went wrong while registering");
  }

  res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered successfully"));
});

const loginUser = asyncHandler(async (req, res) => {
  //collect user credentials
  //validity of credentials
  //if user doesn't exist
  //if password is correct
  //generate access and refresh token
  //send the res and set the cookie

  const { email, username, password } = req.body;

  if (email === "" || username === "") {
    throw new ApiError(400, "username/email is required");
  }

  const user = await userModel.findOne({
    $or: [{ email }, { username }],
  });
  if (!user) {
    throw new ApiError(400, "User doesn't exists");
  }
  if (password === "") {
    throw new ApiError(400, "Password is required");
  }

  const passwordMatch = await user.isMatch(password);

  if (passwordMatch == false) {
    throw new ApiError(400, "Wrong credentials");
  }

  const { accessToken, refreshToken } = generateAccessTokenAndRefreshToken(
    user._id
  );
  const options = {
    httpOnly: true,
    secure: true,
  };

  const loggedInUser = await userModel
    .findById(user._id)
    .select("-password -refreshToken");

  res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        201,
        {
          user: loggedInUser,
          accessToken,
          refreshToken,
        },
        "User logged in successfully"
      )
    );
});

const logout = asyncHandler(async (req, res) => {
  const userId = req.user._id;
  if (!user) {
    throw new ApiError(400, "Something went wrong");
  }

  const user = await userModel.findByIdAndUpdate(userId, {
    $set: {
      refreshToken: undefined,
    },
  });

  res
    .status(200)
    .clearCookie("refreshToken")
    .clearCookie("accessToken")
    .json(201, {}, "Logout Successfully");
});

const changeCurrentPass = asyncHandler(async (req, res) => {
  //accept data from the user
  const { currentPass, newPass } = req.body;

  //current logged in user
  const user = await userModel.findById(req.user?._id);

  //validate the credentials
  const isPassMatch = await user.isMatch(currentPass);

  if (!isPassMatch) {
    throw new ApiError(400, "Invalid old password");
  }

  user.password = newPass;
  await user.save({ validateBeforeSave: false });

  return res
    .status(200)
    .json(new ApiResponse(201, {}, "Password updated successfully"));
});

const getCurrentUser = asyncHandler(async (req, res) => {
  return res
    .status(200)
    .json(new ApiResponse(200, req.user, "Current user fetched successfully"));
});

const updateUserAvatar = asyncHandler(async (req, res) => {
  const avatarLocalPath = await req.file?.path;

  const oldAvatarUrl=await req.user?.avatar;

  if (!avatarLocalPath) {
    throw new ApiError(400, "Invalid file path");
  }

  const avatarPath = await uploadFile(avatarLocalPath);

  if (!avatarPath) {
    throw new ApiError(500, "Error uploading the file");
  }

  const user = await userModel.findByIdAndUpdate(
    req.user?._id,
    {
      $set: {
        avatar: avatarPath.url,
      },
    },
    {
      new: true,
    }
  );

  const deleteAvatar=await deleteFile(oldAvatarUrl);
  if (!deleteAvatar){
    throw new ApiError(500,"Error deleting the image")
  }

  

  return res.status(200).json(
    new ApiResponse(201,user,"Avatar image updated successfully")
  )
});
const updateUserCoverImage = asyncHandler(async (req, res) => {
  const coverImageLocalPath = await req.file?.path;

  const oldCoverImage=await req.user?.coverImage

  if (!coverImageLocalPath) {
    throw new ApiError(400, "Invalid file path");
  }

  const coverImagePath = await uploadFile(coverImageLocalPath);

  if (!coverImagePath) {
    throw new ApiError(500, "Error uploading the file");
  }

  const user = await userModel.findByIdAndUpdate(
    req.user?._id,
    {
      $set: {
        coverImage: coverImagePath.url,
      },
    },
    {
      new: true,
    }
  );

  const deleteCoverImage=await deleteFile(oldCoverImage);
  if (!deleteCoverImage){
    throw new ApiError(500,"Error deleting the image");
  }

  return res.status(200).json(
    new ApiResponse(201,user,"coverImage updated successfully")
  )
});
const updateUserDetails=asyncHandler(async (req,res)=>{
   const {fullName,email}=req.body;

   if (!fullName || !email){
      throw new ApiError(400,"All fields are required");
   }


  const user=await userModel.findByIdAndUpdate(req.user?._id,{
    $set:{
      fullName,email
    },
   
  },{
    new:true
  })
   

   return res.status(200).json(
    new ApiResponse(201,user,"details updated successfully")
   )
});

const displayUserChannel=asyncHandler(async (req,res)=>{
   const {username}=req.params;
   if (!username){
    throw new ApiError(400,"username is required");
   }

   const channelDetails=await userModel.aggregate([
    //find the user whose channel detail we want
    {
      $match:{
        username:username
      }
    },
    //finding the number of subscriber
    {
      $lookup:{
        from:"subscriptions",
        localField:"_id",
        foreignField:"channel",
        as:"subscribers"
      }
    },
    //to count the subscribed channels
    {
      $lookup:{
        from:"subscriptions",
        localField:"_id",
        foreignField:"subscriber",
        as:"subscribedTo"
      }
    },
    //adding the subscriber and subscribedTo count in the document
    {
      $addFields:{
        subscriberCount:{
          $size:"$subscribers"
        },
        subscribeToCount:{
          $size:"$subscribedTo"
        },
        isSubscribed:{
          $cond:{
            if:{
              $in:[req.user?._id,"$subscribers.subscriber"]
            },
            then:true,
            else:false
          }
        }
      }
    },
    //choose which fields to actually give to user
    {
      $project:{
        fullName:1,
        avatar:1,
        coverImage:1,
        subscriberCount:1,
        subscribeToCount:1,
        username:1,
        email:1,
        isSubscribed:1
      }
    }


   ]);

   if (!channelDetails?.length){
    throw new ApiError(404,"channel doesn't exists")
   }

   return res.status(200).json(
    new ApiResponse(200,channelDetails[0],"Channel details given successfully")
   )
});

const getWatchHistory=asyncHandler(async (req,res)=>{
  //to get the videos of the user, we need to get the document from videos collection , the watchHistory further contains the user information of the user , hence we will do the nested lookup.

const user=await userModel.aggregate([
    //note : aggregation pipeline applies directly in mongoDb and using req.user._id we get only the string part, to get the actual ObjectId of mongoDb we use mongoose.Types.ObjectId 
    {
      $match:{
         _id:new mongoose.Types.ObjectId(req.user._id)
      }
    },
    {
      $lookup:{
        from : "videos",
        localField:"watchHistory",
        foreignField:"_id",
        as:"watchHistory",
        pipeline:[
          {
            $lookup:{
              from:"user",
              localField:"owner",
              foreignField:"_id",
              as:"owner",
              pipeline:[
                {
                  $project:{
                    fullName:1,
                    username:1,
                    avatar:1
                  }
                }
              ]
            }

          },
          {
            $addFields:{
              owner:{
                $first:"$owner"
              }
            }
          }
      ]
      }
    }
  ])

  return res.status(200).json(
    new ApiResponse(
      200,
      user[0].watchHistory,
      "watchHistory fetched successfully"
    )
  )

})


export { registerUser, loginUser, logout, changeCurrentPass, getCurrentUser,updateUserAvatar,updateUserCoverImage,updateUserDetails,getWatchHistory,  displayUserChannel}